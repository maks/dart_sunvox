// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class libsunvox {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libsunvox(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libsunvox.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Int8>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<size_t> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Int32, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, __off_t, ffi.Int32)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Int32)>>(
      '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  late final ffi.Pointer<tsv_audio_callback> _sv_audio_callback =
      _lookup<tsv_audio_callback>('sv_audio_callback');

  tsv_audio_callback get sv_audio_callback => _sv_audio_callback.value;

  set sv_audio_callback(tsv_audio_callback value) =>
      _sv_audio_callback.value = value;

  late final ffi.Pointer<tsv_audio_callback2> _sv_audio_callback2 =
      _lookup<tsv_audio_callback2>('sv_audio_callback2');

  tsv_audio_callback2 get sv_audio_callback2 => _sv_audio_callback2.value;

  set sv_audio_callback2(tsv_audio_callback2 value) =>
      _sv_audio_callback2.value = value;

  late final ffi.Pointer<tsv_open_slot> _sv_open_slot =
      _lookup<tsv_open_slot>('sv_open_slot');

  tsv_open_slot get sv_open_slot => _sv_open_slot.value;

  set sv_open_slot(tsv_open_slot value) => _sv_open_slot.value = value;

  late final ffi.Pointer<tsv_close_slot> _sv_close_slot =
      _lookup<tsv_close_slot>('sv_close_slot');

  tsv_close_slot get sv_close_slot => _sv_close_slot.value;

  set sv_close_slot(tsv_close_slot value) => _sv_close_slot.value = value;

  late final ffi.Pointer<tsv_lock_slot> _sv_lock_slot =
      _lookup<tsv_lock_slot>('sv_lock_slot');

  tsv_lock_slot get sv_lock_slot => _sv_lock_slot.value;

  set sv_lock_slot(tsv_lock_slot value) => _sv_lock_slot.value = value;

  late final ffi.Pointer<tsv_unlock_slot> _sv_unlock_slot =
      _lookup<tsv_unlock_slot>('sv_unlock_slot');

  tsv_unlock_slot get sv_unlock_slot => _sv_unlock_slot.value;

  set sv_unlock_slot(tsv_unlock_slot value) => _sv_unlock_slot.value = value;

  late final ffi.Pointer<tsv_init> _sv_init = _lookup<tsv_init>('sv_init');

  tsv_init get sv_init => _sv_init.value;

  set sv_init(tsv_init value) => _sv_init.value = value;

  late final ffi.Pointer<tsv_deinit> _sv_deinit =
      _lookup<tsv_deinit>('sv_deinit');

  tsv_deinit get sv_deinit => _sv_deinit.value;

  set sv_deinit(tsv_deinit value) => _sv_deinit.value = value;

  late final ffi.Pointer<tsv_get_sample_rate> _sv_get_sample_rate =
      _lookup<tsv_get_sample_rate>('sv_get_sample_rate');

  tsv_get_sample_rate get sv_get_sample_rate => _sv_get_sample_rate.value;

  set sv_get_sample_rate(tsv_get_sample_rate value) =>
      _sv_get_sample_rate.value = value;

  late final ffi.Pointer<tsv_update_input> _sv_update_input =
      _lookup<tsv_update_input>('sv_update_input');

  tsv_update_input get sv_update_input => _sv_update_input.value;

  set sv_update_input(tsv_update_input value) => _sv_update_input.value = value;

  late final ffi.Pointer<tsv_load> _sv_load = _lookup<tsv_load>('sv_load');

  tsv_load get sv_load => _sv_load.value;

  set sv_load(tsv_load value) => _sv_load.value = value;

  late final ffi.Pointer<tsv_load_from_memory> _sv_load_from_memory =
      _lookup<tsv_load_from_memory>('sv_load_from_memory');

  tsv_load_from_memory get sv_load_from_memory => _sv_load_from_memory.value;

  set sv_load_from_memory(tsv_load_from_memory value) =>
      _sv_load_from_memory.value = value;

  late final ffi.Pointer<tsv_save> _sv_save = _lookup<tsv_save>('sv_save');

  tsv_save get sv_save => _sv_save.value;

  set sv_save(tsv_save value) => _sv_save.value = value;

  late final ffi.Pointer<tsv_play> _sv_play = _lookup<tsv_play>('sv_play');

  tsv_play get sv_play => _sv_play.value;

  set sv_play(tsv_play value) => _sv_play.value = value;

  late final ffi.Pointer<tsv_play_from_beginning> _sv_play_from_beginning =
      _lookup<tsv_play_from_beginning>('sv_play_from_beginning');

  tsv_play_from_beginning get sv_play_from_beginning =>
      _sv_play_from_beginning.value;

  set sv_play_from_beginning(tsv_play_from_beginning value) =>
      _sv_play_from_beginning.value = value;

  late final ffi.Pointer<tsv_stop> _sv_stop = _lookup<tsv_stop>('sv_stop');

  tsv_stop get sv_stop => _sv_stop.value;

  set sv_stop(tsv_stop value) => _sv_stop.value = value;

  late final ffi.Pointer<tsv_pause> _sv_pause = _lookup<tsv_pause>('sv_pause');

  tsv_pause get sv_pause => _sv_pause.value;

  set sv_pause(tsv_pause value) => _sv_pause.value = value;

  late final ffi.Pointer<tsv_resume> _sv_resume =
      _lookup<tsv_resume>('sv_resume');

  tsv_resume get sv_resume => _sv_resume.value;

  set sv_resume(tsv_resume value) => _sv_resume.value = value;

  late final ffi.Pointer<tsv_sync_resume> _sv_sync_resume =
      _lookup<tsv_sync_resume>('sv_sync_resume');

  tsv_sync_resume get sv_sync_resume => _sv_sync_resume.value;

  set sv_sync_resume(tsv_sync_resume value) => _sv_sync_resume.value = value;

  late final ffi.Pointer<tsv_set_autostop> _sv_set_autostop =
      _lookup<tsv_set_autostop>('sv_set_autostop');

  tsv_set_autostop get sv_set_autostop => _sv_set_autostop.value;

  set sv_set_autostop(tsv_set_autostop value) => _sv_set_autostop.value = value;

  late final ffi.Pointer<tsv_get_autostop> _sv_get_autostop =
      _lookup<tsv_get_autostop>('sv_get_autostop');

  tsv_get_autostop get sv_get_autostop => _sv_get_autostop.value;

  set sv_get_autostop(tsv_get_autostop value) => _sv_get_autostop.value = value;

  late final ffi.Pointer<tsv_end_of_song> _sv_end_of_song =
      _lookup<tsv_end_of_song>('sv_end_of_song');

  tsv_end_of_song get sv_end_of_song => _sv_end_of_song.value;

  set sv_end_of_song(tsv_end_of_song value) => _sv_end_of_song.value = value;

  late final ffi.Pointer<tsv_rewind> _sv_rewind =
      _lookup<tsv_rewind>('sv_rewind');

  tsv_rewind get sv_rewind => _sv_rewind.value;

  set sv_rewind(tsv_rewind value) => _sv_rewind.value = value;

  late final ffi.Pointer<tsv_volume> _sv_volume =
      _lookup<tsv_volume>('sv_volume');

  tsv_volume get sv_volume => _sv_volume.value;

  set sv_volume(tsv_volume value) => _sv_volume.value = value;

  late final ffi.Pointer<tsv_set_event_t> _sv_set_event_t =
      _lookup<tsv_set_event_t>('sv_set_event_t');

  tsv_set_event_t get sv_set_event_t => _sv_set_event_t.value;

  set sv_set_event_t(tsv_set_event_t value) => _sv_set_event_t.value = value;

  late final ffi.Pointer<tsv_send_event> _sv_send_event =
      _lookup<tsv_send_event>('sv_send_event');

  tsv_send_event get sv_send_event => _sv_send_event.value;

  set sv_send_event(tsv_send_event value) => _sv_send_event.value = value;

  late final ffi.Pointer<tsv_get_current_line> _sv_get_current_line =
      _lookup<tsv_get_current_line>('sv_get_current_line');

  tsv_get_current_line get sv_get_current_line => _sv_get_current_line.value;

  set sv_get_current_line(tsv_get_current_line value) =>
      _sv_get_current_line.value = value;

  late final ffi.Pointer<tsv_get_current_line2> _sv_get_current_line2 =
      _lookup<tsv_get_current_line2>('sv_get_current_line2');

  tsv_get_current_line2 get sv_get_current_line2 => _sv_get_current_line2.value;

  set sv_get_current_line2(tsv_get_current_line2 value) =>
      _sv_get_current_line2.value = value;

  late final ffi.Pointer<tsv_get_current_signal_level>
      _sv_get_current_signal_level =
      _lookup<tsv_get_current_signal_level>('sv_get_current_signal_level');

  tsv_get_current_signal_level get sv_get_current_signal_level =>
      _sv_get_current_signal_level.value;

  set sv_get_current_signal_level(tsv_get_current_signal_level value) =>
      _sv_get_current_signal_level.value = value;

  late final ffi.Pointer<tsv_get_song_name> _sv_get_song_name =
      _lookup<tsv_get_song_name>('sv_get_song_name');

  tsv_get_song_name get sv_get_song_name => _sv_get_song_name.value;

  set sv_get_song_name(tsv_get_song_name value) =>
      _sv_get_song_name.value = value;

  late final ffi.Pointer<tsv_get_song_bpm> _sv_get_song_bpm =
      _lookup<tsv_get_song_bpm>('sv_get_song_bpm');

  tsv_get_song_bpm get sv_get_song_bpm => _sv_get_song_bpm.value;

  set sv_get_song_bpm(tsv_get_song_bpm value) => _sv_get_song_bpm.value = value;

  late final ffi.Pointer<tsv_get_song_tpl> _sv_get_song_tpl =
      _lookup<tsv_get_song_tpl>('sv_get_song_tpl');

  tsv_get_song_tpl get sv_get_song_tpl => _sv_get_song_tpl.value;

  set sv_get_song_tpl(tsv_get_song_tpl value) => _sv_get_song_tpl.value = value;

  late final ffi.Pointer<tsv_get_song_length_frames>
      _sv_get_song_length_frames =
      _lookup<tsv_get_song_length_frames>('sv_get_song_length_frames');

  tsv_get_song_length_frames get sv_get_song_length_frames =>
      _sv_get_song_length_frames.value;

  set sv_get_song_length_frames(tsv_get_song_length_frames value) =>
      _sv_get_song_length_frames.value = value;

  late final ffi.Pointer<tsv_get_song_length_lines> _sv_get_song_length_lines =
      _lookup<tsv_get_song_length_lines>('sv_get_song_length_lines');

  tsv_get_song_length_lines get sv_get_song_length_lines =>
      _sv_get_song_length_lines.value;

  set sv_get_song_length_lines(tsv_get_song_length_lines value) =>
      _sv_get_song_length_lines.value = value;

  late final ffi.Pointer<tsv_get_time_map> _sv_get_time_map =
      _lookup<tsv_get_time_map>('sv_get_time_map');

  tsv_get_time_map get sv_get_time_map => _sv_get_time_map.value;

  set sv_get_time_map(tsv_get_time_map value) => _sv_get_time_map.value = value;

  late final ffi.Pointer<tsv_new_module> _sv_new_module =
      _lookup<tsv_new_module>('sv_new_module');

  tsv_new_module get sv_new_module => _sv_new_module.value;

  set sv_new_module(tsv_new_module value) => _sv_new_module.value = value;

  late final ffi.Pointer<tsv_remove_module> _sv_remove_module =
      _lookup<tsv_remove_module>('sv_remove_module');

  tsv_remove_module get sv_remove_module => _sv_remove_module.value;

  set sv_remove_module(tsv_remove_module value) =>
      _sv_remove_module.value = value;

  late final ffi.Pointer<tsv_connect_module> _sv_connect_module =
      _lookup<tsv_connect_module>('sv_connect_module');

  tsv_connect_module get sv_connect_module => _sv_connect_module.value;

  set sv_connect_module(tsv_connect_module value) =>
      _sv_connect_module.value = value;

  late final ffi.Pointer<tsv_disconnect_module> _sv_disconnect_module =
      _lookup<tsv_disconnect_module>('sv_disconnect_module');

  tsv_disconnect_module get sv_disconnect_module => _sv_disconnect_module.value;

  set sv_disconnect_module(tsv_disconnect_module value) =>
      _sv_disconnect_module.value = value;

  late final ffi.Pointer<tsv_load_module> _sv_load_module =
      _lookup<tsv_load_module>('sv_load_module');

  tsv_load_module get sv_load_module => _sv_load_module.value;

  set sv_load_module(tsv_load_module value) => _sv_load_module.value = value;

  late final ffi.Pointer<tsv_load_module_from_memory>
      _sv_load_module_from_memory =
      _lookup<tsv_load_module_from_memory>('sv_load_module_from_memory');

  tsv_load_module_from_memory get sv_load_module_from_memory =>
      _sv_load_module_from_memory.value;

  set sv_load_module_from_memory(tsv_load_module_from_memory value) =>
      _sv_load_module_from_memory.value = value;

  late final ffi.Pointer<tsv_sampler_load> _sv_sampler_load =
      _lookup<tsv_sampler_load>('sv_sampler_load');

  tsv_sampler_load get sv_sampler_load => _sv_sampler_load.value;

  set sv_sampler_load(tsv_sampler_load value) => _sv_sampler_load.value = value;

  late final ffi.Pointer<tsv_sampler_load_from_memory>
      _sv_sampler_load_from_memory =
      _lookup<tsv_sampler_load_from_memory>('sv_sampler_load_from_memory');

  tsv_sampler_load_from_memory get sv_sampler_load_from_memory =>
      _sv_sampler_load_from_memory.value;

  set sv_sampler_load_from_memory(tsv_sampler_load_from_memory value) =>
      _sv_sampler_load_from_memory.value = value;

  late final ffi.Pointer<tsv_get_number_of_modules> _sv_get_number_of_modules =
      _lookup<tsv_get_number_of_modules>('sv_get_number_of_modules');

  tsv_get_number_of_modules get sv_get_number_of_modules =>
      _sv_get_number_of_modules.value;

  set sv_get_number_of_modules(tsv_get_number_of_modules value) =>
      _sv_get_number_of_modules.value = value;

  late final ffi.Pointer<tsv_find_module> _sv_find_module =
      _lookup<tsv_find_module>('sv_find_module');

  tsv_find_module get sv_find_module => _sv_find_module.value;

  set sv_find_module(tsv_find_module value) => _sv_find_module.value = value;

  late final ffi.Pointer<tsv_get_module_flags> _sv_get_module_flags =
      _lookup<tsv_get_module_flags>('sv_get_module_flags');

  tsv_get_module_flags get sv_get_module_flags => _sv_get_module_flags.value;

  set sv_get_module_flags(tsv_get_module_flags value) =>
      _sv_get_module_flags.value = value;

  late final ffi.Pointer<tsv_get_module_inputs> _sv_get_module_inputs =
      _lookup<tsv_get_module_inputs>('sv_get_module_inputs');

  tsv_get_module_inputs get sv_get_module_inputs => _sv_get_module_inputs.value;

  set sv_get_module_inputs(tsv_get_module_inputs value) =>
      _sv_get_module_inputs.value = value;

  late final ffi.Pointer<tsv_get_module_outputs> _sv_get_module_outputs =
      _lookup<tsv_get_module_outputs>('sv_get_module_outputs');

  tsv_get_module_outputs get sv_get_module_outputs =>
      _sv_get_module_outputs.value;

  set sv_get_module_outputs(tsv_get_module_outputs value) =>
      _sv_get_module_outputs.value = value;

  late final ffi.Pointer<tsv_get_module_name> _sv_get_module_name =
      _lookup<tsv_get_module_name>('sv_get_module_name');

  tsv_get_module_name get sv_get_module_name => _sv_get_module_name.value;

  set sv_get_module_name(tsv_get_module_name value) =>
      _sv_get_module_name.value = value;

  late final ffi.Pointer<tsv_get_module_xy> _sv_get_module_xy =
      _lookup<tsv_get_module_xy>('sv_get_module_xy');

  tsv_get_module_xy get sv_get_module_xy => _sv_get_module_xy.value;

  set sv_get_module_xy(tsv_get_module_xy value) =>
      _sv_get_module_xy.value = value;

  late final ffi.Pointer<tsv_get_module_color> _sv_get_module_color =
      _lookup<tsv_get_module_color>('sv_get_module_color');

  tsv_get_module_color get sv_get_module_color => _sv_get_module_color.value;

  set sv_get_module_color(tsv_get_module_color value) =>
      _sv_get_module_color.value = value;

  late final ffi.Pointer<tsv_get_module_finetune> _sv_get_module_finetune =
      _lookup<tsv_get_module_finetune>('sv_get_module_finetune');

  tsv_get_module_finetune get sv_get_module_finetune =>
      _sv_get_module_finetune.value;

  set sv_get_module_finetune(tsv_get_module_finetune value) =>
      _sv_get_module_finetune.value = value;

  late final ffi.Pointer<tsv_get_module_scope2> _sv_get_module_scope2 =
      _lookup<tsv_get_module_scope2>('sv_get_module_scope2');

  tsv_get_module_scope2 get sv_get_module_scope2 => _sv_get_module_scope2.value;

  set sv_get_module_scope2(tsv_get_module_scope2 value) =>
      _sv_get_module_scope2.value = value;

  late final ffi.Pointer<tsv_module_curve> _sv_module_curve =
      _lookup<tsv_module_curve>('sv_module_curve');

  tsv_module_curve get sv_module_curve => _sv_module_curve.value;

  set sv_module_curve(tsv_module_curve value) => _sv_module_curve.value = value;

  late final ffi.Pointer<tsv_get_number_of_module_ctls>
      _sv_get_number_of_module_ctls =
      _lookup<tsv_get_number_of_module_ctls>('sv_get_number_of_module_ctls');

  tsv_get_number_of_module_ctls get sv_get_number_of_module_ctls =>
      _sv_get_number_of_module_ctls.value;

  set sv_get_number_of_module_ctls(tsv_get_number_of_module_ctls value) =>
      _sv_get_number_of_module_ctls.value = value;

  late final ffi.Pointer<tsv_get_module_ctl_name> _sv_get_module_ctl_name =
      _lookup<tsv_get_module_ctl_name>('sv_get_module_ctl_name');

  tsv_get_module_ctl_name get sv_get_module_ctl_name =>
      _sv_get_module_ctl_name.value;

  set sv_get_module_ctl_name(tsv_get_module_ctl_name value) =>
      _sv_get_module_ctl_name.value = value;

  late final ffi.Pointer<tsv_get_module_ctl_value> _sv_get_module_ctl_value =
      _lookup<tsv_get_module_ctl_value>('sv_get_module_ctl_value');

  tsv_get_module_ctl_value get sv_get_module_ctl_value =>
      _sv_get_module_ctl_value.value;

  set sv_get_module_ctl_value(tsv_get_module_ctl_value value) =>
      _sv_get_module_ctl_value.value = value;

  late final ffi.Pointer<tsv_get_number_of_patterns>
      _sv_get_number_of_patterns =
      _lookup<tsv_get_number_of_patterns>('sv_get_number_of_patterns');

  tsv_get_number_of_patterns get sv_get_number_of_patterns =>
      _sv_get_number_of_patterns.value;

  set sv_get_number_of_patterns(tsv_get_number_of_patterns value) =>
      _sv_get_number_of_patterns.value = value;

  late final ffi.Pointer<tsv_find_pattern> _sv_find_pattern =
      _lookup<tsv_find_pattern>('sv_find_pattern');

  tsv_find_pattern get sv_find_pattern => _sv_find_pattern.value;

  set sv_find_pattern(tsv_find_pattern value) => _sv_find_pattern.value = value;

  late final ffi.Pointer<tsv_get_pattern_x> _sv_get_pattern_x =
      _lookup<tsv_get_pattern_x>('sv_get_pattern_x');

  tsv_get_pattern_x get sv_get_pattern_x => _sv_get_pattern_x.value;

  set sv_get_pattern_x(tsv_get_pattern_x value) =>
      _sv_get_pattern_x.value = value;

  late final ffi.Pointer<tsv_get_pattern_y> _sv_get_pattern_y =
      _lookup<tsv_get_pattern_y>('sv_get_pattern_y');

  tsv_get_pattern_y get sv_get_pattern_y => _sv_get_pattern_y.value;

  set sv_get_pattern_y(tsv_get_pattern_y value) =>
      _sv_get_pattern_y.value = value;

  late final ffi.Pointer<tsv_get_pattern_tracks> _sv_get_pattern_tracks =
      _lookup<tsv_get_pattern_tracks>('sv_get_pattern_tracks');

  tsv_get_pattern_tracks get sv_get_pattern_tracks =>
      _sv_get_pattern_tracks.value;

  set sv_get_pattern_tracks(tsv_get_pattern_tracks value) =>
      _sv_get_pattern_tracks.value = value;

  late final ffi.Pointer<tsv_get_pattern_lines> _sv_get_pattern_lines =
      _lookup<tsv_get_pattern_lines>('sv_get_pattern_lines');

  tsv_get_pattern_lines get sv_get_pattern_lines => _sv_get_pattern_lines.value;

  set sv_get_pattern_lines(tsv_get_pattern_lines value) =>
      _sv_get_pattern_lines.value = value;

  late final ffi.Pointer<tsv_get_pattern_name> _sv_get_pattern_name =
      _lookup<tsv_get_pattern_name>('sv_get_pattern_name');

  tsv_get_pattern_name get sv_get_pattern_name => _sv_get_pattern_name.value;

  set sv_get_pattern_name(tsv_get_pattern_name value) =>
      _sv_get_pattern_name.value = value;

  late final ffi.Pointer<tsv_get_pattern_data> _sv_get_pattern_data =
      _lookup<tsv_get_pattern_data>('sv_get_pattern_data');

  tsv_get_pattern_data get sv_get_pattern_data => _sv_get_pattern_data.value;

  set sv_get_pattern_data(tsv_get_pattern_data value) =>
      _sv_get_pattern_data.value = value;

  late final ffi.Pointer<tsv_set_pattern_event> _sv_set_pattern_event =
      _lookup<tsv_set_pattern_event>('sv_set_pattern_event');

  tsv_set_pattern_event get sv_set_pattern_event => _sv_set_pattern_event.value;

  set sv_set_pattern_event(tsv_set_pattern_event value) =>
      _sv_set_pattern_event.value = value;

  late final ffi.Pointer<tsv_get_pattern_event> _sv_get_pattern_event =
      _lookup<tsv_get_pattern_event>('sv_get_pattern_event');

  tsv_get_pattern_event get sv_get_pattern_event => _sv_get_pattern_event.value;

  set sv_get_pattern_event(tsv_get_pattern_event value) =>
      _sv_get_pattern_event.value = value;

  late final ffi.Pointer<tsv_pattern_mute> _sv_pattern_mute =
      _lookup<tsv_pattern_mute>('sv_pattern_mute');

  tsv_pattern_mute get sv_pattern_mute => _sv_pattern_mute.value;

  set sv_pattern_mute(tsv_pattern_mute value) => _sv_pattern_mute.value = value;

  late final ffi.Pointer<tsv_get_ticks> _sv_get_ticks =
      _lookup<tsv_get_ticks>('sv_get_ticks');

  tsv_get_ticks get sv_get_ticks => _sv_get_ticks.value;

  set sv_get_ticks(tsv_get_ticks value) => _sv_get_ticks.value = value;

  late final ffi.Pointer<tsv_get_ticks_per_second> _sv_get_ticks_per_second =
      _lookup<tsv_get_ticks_per_second>('sv_get_ticks_per_second');

  tsv_get_ticks_per_second get sv_get_ticks_per_second =>
      _sv_get_ticks_per_second.value;

  set sv_get_ticks_per_second(tsv_get_ticks_per_second value) =>
      _sv_get_ticks_per_second.value = value;

  late final ffi.Pointer<tsv_get_log> _sv_get_log =
      _lookup<tsv_get_log>('sv_get_log');

  tsv_get_log get sv_get_log => _sv_get_log.value;

  set sv_get_log(tsv_get_log value) => _sv_get_log.value = value;

  int sv_load_dll2(
    LIBNAME_STR_TYPE filename,
  ) {
    return _sv_load_dll2(
      filename,
    );
  }

  late final _sv_load_dll2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LIBNAME_STR_TYPE)>>(
          'sv_load_dll2');
  late final _sv_load_dll2 =
      _sv_load_dll2Ptr.asFunction<int Function(LIBNAME_STR_TYPE)>();

  int sv_load_dll() {
    return _sv_load_dll();
  }

  late final _sv_load_dllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('sv_load_dll');
  late final _sv_load_dll = _sv_load_dllPtr.asFunction<int Function()>();

  int sv_unload_dll() {
    return _sv_unload_dll();
  }

  late final _sv_unload_dllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('sv_unload_dll');
  late final _sv_unload_dll = _sv_unload_dllPtr.asFunction<int Function()>();
}

class _fsid_t_ extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> _val_;
}

class _mbstate_t_ extends ffi.Struct {
  @ffi.Int32()
  external int _count_;

  external UnnamedUnion1 _value_;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int _wch_;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> _wchb_;
}

class G_fpos_t_ extends ffi.Struct {
  @__off_t()
  external int _pos_;

  external _mbstate_t_ _state_;
}

typedef __off_t = ffi.Int64;

class G_fpos64_t_ extends ffi.Struct {
  @__off64_t()
  external int _pos_;

  external _mbstate_t_ _state_;
}

typedef __off64_t = ffi.Int64;

class IO_FILE_ extends ffi.Struct {
  @ffi.Int32()
  external int flags_;

  external ffi.Pointer<ffi.Int8> IO_read_ptr_;

  external ffi.Pointer<ffi.Int8> IO_read_end_;

  external ffi.Pointer<ffi.Int8> IO_read_base_;

  external ffi.Pointer<ffi.Int8> IO_write_base_;

  external ffi.Pointer<ffi.Int8> IO_write_ptr_;

  external ffi.Pointer<ffi.Int8> IO_write_end_;

  external ffi.Pointer<ffi.Int8> IO_buf_base_;

  external ffi.Pointer<ffi.Int8> IO_buf_end_;

  external ffi.Pointer<ffi.Int8> IO_save_base_;

  external ffi.Pointer<ffi.Int8> IO_backup_base_;

  external ffi.Pointer<ffi.Int8> IO_save_end_;

  external ffi.Pointer<IO_marker_> markers_;

  external ffi.Pointer<IO_FILE_> chain_;

  @ffi.Int32()
  external int fileno_;

  @ffi.Int32()
  external int flags2_;

  @__off_t()
  external int old_offset_;

  @ffi.Uint16()
  external int cur_column_;

  @ffi.Int8()
  external int vtable_offset_;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> shortbuf_;

  external ffi.Pointer<_IO_lock_t> lock_;

  @__off64_t()
  external int offset_;

  external ffi.Pointer<IO_codecvt_> codecvt_;

  external ffi.Pointer<IO_wide_data_> wide_data_;

  external ffi.Pointer<IO_FILE_> freeres_list_;

  external ffi.Pointer<ffi.Void> freeres_buf_;

  @size_t()
  external int _pad5_;

  @ffi.Int32()
  external int mode_;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> unused2_;
}

class IO_marker_ extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class IO_codecvt_ extends ffi.Opaque {}

class IO_wide_data_ extends ffi.Opaque {}

typedef size_t = ffi.Uint64;
typedef FILE = IO_FILE_;

class _va_list_tag_ extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef __ssize_t = ffi.Int64;
typedef fpos_t = __fpos_t;
typedef __fpos_t = G_fpos_t_;

class sunvox_note extends ffi.Struct {
  @ffi.Uint8()
  external int note;

  @ffi.Uint8()
  external int vel;

  @ffi.Uint16()
  external int module;

  @ffi.Uint16()
  external int ctl;

  @ffi.Uint16()
  external int ctl_val;
}

typedef tsv_audio_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32, ffi.Uint32)>>;
typedef tsv_audio_callback2 = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
            ffi.Uint32, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef tsv_open_slot
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_close_slot
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_lock_slot
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_unlock_slot
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_init = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32, ffi.Uint32)>>;
typedef tsv_deinit = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef tsv_get_sample_rate
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef tsv_update_input
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef tsv_load = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>;
typedef tsv_load_from_memory = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Uint32)>>;
typedef tsv_save = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>;
typedef tsv_play
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_play_from_beginning
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_stop
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_pause
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_resume
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_sync_resume
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_set_autostop
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_autostop
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_end_of_song
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_rewind
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_volume
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_set_event_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_send_event = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
            ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_get_current_line
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_get_current_line2
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_get_current_signal_level
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_song_name = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>;
typedef tsv_get_song_bpm
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_get_song_tpl
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_get_song_length_frames
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>;
typedef tsv_get_song_length_lines
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>;
typedef tsv_get_time_map = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
            ffi.Pointer<ffi.Uint32>, ffi.Int32)>>;
typedef tsv_new_module = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_remove_module
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_connect_module = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_disconnect_module = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_load_module = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
            ffi.Int32, ffi.Int32)>>;
typedef tsv_load_module_from_memory = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Uint32,
            ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_sampler_load = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>;
typedef tsv_sampler_load_from_memory = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>,
            ffi.Uint32, ffi.Int32)>>;
typedef tsv_get_number_of_modules
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_find_module = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>;
typedef tsv_get_module_flags = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_inputs = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_outputs = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_name = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_xy = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_color
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_finetune = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_scope2 = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
            ffi.Pointer<ffi.Int16>, ffi.Uint32)>>;
typedef tsv_module_curve = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
            ffi.Pointer<ffi.Float>, ffi.Int32, ffi.Int32)>>;
typedef tsv_get_number_of_module_ctls
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_ctl_name = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Int8> Function(ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_get_module_ctl_value = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_get_number_of_patterns
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>;
typedef tsv_find_pattern = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>;
typedef tsv_get_pattern_x
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_pattern_y
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_pattern_tracks
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_pattern_lines
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_pattern_name = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_get_pattern_data = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<sunvox_note> Function(ffi.Int32, ffi.Int32)>>;
typedef tsv_set_pattern_event = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
            ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_get_pattern_event = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_pattern_mute = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef tsv_get_ticks = ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>;
typedef tsv_get_ticks_per_second
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>;
typedef tsv_get_log = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>;
typedef LIBNAME_STR_TYPE = ffi.Pointer<ffi.Int8>;

const int _STDIO_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 34;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int NULL = 0;

const int __GNUC_VA_LIST = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDINT_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NOTECMD_NOTE_OFF = 128;

const int NOTECMD_ALL_NOTES_OFF = 129;

const int NOTECMD_CLEAN_SYNTHS = 130;

const int NOTECMD_STOP = 131;

const int NOTECMD_PLAY = 132;

const int NOTECMD_SET_PITCH = 133;

const int SV_INIT_FLAG_NO_DEBUG_OUTPUT = 1;

const int SV_INIT_FLAG_USER_AUDIO_CALLBACK = 2;

const int SV_INIT_FLAG_OFFLINE = 2;

const int SV_INIT_FLAG_AUDIO_INT16 = 4;

const int SV_INIT_FLAG_AUDIO_FLOAT32 = 8;

const int SV_INIT_FLAG_ONE_THREAD = 16;

const int SV_TIME_MAP_SPEED = 0;

const int SV_TIME_MAP_FRAMECNT = 1;

const int SV_MODULE_FLAG_EXISTS = 1;

const int SV_MODULE_FLAG_EFFECT = 2;

const int SV_MODULE_FLAG_MUTE = 4;

const int SV_MODULE_FLAG_SOLO = 8;

const int SV_MODULE_FLAG_BYPASS = 16;

const int SV_MODULE_INPUTS_OFF = 16;

const int SV_MODULE_INPUTS_MASK = 16711680;

const int SV_MODULE_OUTPUTS_OFF = 24;

const int SV_MODULE_OUTPUTS_MASK = -16777216;

const String LIBNAME = './sunvox.so';
