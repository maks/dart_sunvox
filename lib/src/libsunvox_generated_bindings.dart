// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class libsunvox {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libsunvox(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libsunvox.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Int8>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<size_t> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_va_list_tag_>)>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<_va_list_tag_>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<_va_list_tag_>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Int32, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, __off_t, ffi.Int32)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Int32)>>(
      '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int sv_init(
    ffi.Pointer<ffi.Int8> config,
    int freq,
    int channels,
    int flags,
  ) {
    return _sv_init(
      config,
      freq,
      channels,
      flags,
    );
  }

  late final _sv_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32,
              ffi.Uint32)>>('sv_init');
  late final _sv_init = _sv_initPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int, int)>();

  int sv_deinit() {
    return _sv_deinit();
  }

  late final _sv_deinitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('sv_deinit');
  late final _sv_deinit = _sv_deinitPtr.asFunction<int Function()>();

  int sv_get_sample_rate() {
    return _sv_get_sample_rate();
  }

  late final _sv_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('sv_get_sample_rate');
  late final _sv_get_sample_rate =
      _sv_get_sample_ratePtr.asFunction<int Function()>();

  int sv_update_input() {
    return _sv_update_input();
  }

  late final _sv_update_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('sv_update_input');
  late final _sv_update_input =
      _sv_update_inputPtr.asFunction<int Function()>();

  int sv_audio_callback(
    ffi.Pointer<ffi.Void> buf,
    int frames,
    int latency,
    int out_time,
  ) {
    return _sv_audio_callback(
      buf,
      frames,
      latency,
      out_time,
    );
  }

  late final _sv_audio_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Uint32)>>('sv_audio_callback');
  late final _sv_audio_callback = _sv_audio_callbackPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  int sv_audio_callback2(
    ffi.Pointer<ffi.Void> buf,
    int frames,
    int latency,
    int out_time,
    int in_type,
    int in_channels,
    ffi.Pointer<ffi.Void> in_buf,
  ) {
    return _sv_audio_callback2(
      buf,
      frames,
      latency,
      out_time,
      in_type,
      in_channels,
      in_buf,
    );
  }

  late final _sv_audio_callback2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('sv_audio_callback2');
  late final _sv_audio_callback2 = _sv_audio_callback2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  int sv_open_slot(
    int slot,
  ) {
    return _sv_open_slot(
      slot,
    );
  }

  late final _sv_open_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_open_slot');
  late final _sv_open_slot = _sv_open_slotPtr.asFunction<int Function(int)>();

  int sv_close_slot(
    int slot,
  ) {
    return _sv_close_slot(
      slot,
    );
  }

  late final _sv_close_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_close_slot');
  late final _sv_close_slot = _sv_close_slotPtr.asFunction<int Function(int)>();

  int sv_lock_slot(
    int slot,
  ) {
    return _sv_lock_slot(
      slot,
    );
  }

  late final _sv_lock_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_lock_slot');
  late final _sv_lock_slot = _sv_lock_slotPtr.asFunction<int Function(int)>();

  int sv_unlock_slot(
    int slot,
  ) {
    return _sv_unlock_slot(
      slot,
    );
  }

  late final _sv_unlock_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_unlock_slot');
  late final _sv_unlock_slot =
      _sv_unlock_slotPtr.asFunction<int Function(int)>();

  int sv_load(
    int slot,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _sv_load(
      slot,
      name,
    );
  }

  late final _sv_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('sv_load');
  late final _sv_load =
      _sv_loadPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int sv_load_from_memory(
    int slot,
    ffi.Pointer<ffi.Void> data,
    int data_size,
  ) {
    return _sv_load_from_memory(
      slot,
      data,
      data_size,
    );
  }

  late final _sv_load_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('sv_load_from_memory');
  late final _sv_load_from_memory = _sv_load_from_memoryPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int sv_save(
    int slot,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _sv_save(
      slot,
      name,
    );
  }

  late final _sv_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('sv_save');
  late final _sv_save =
      _sv_savePtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int sv_play(
    int slot,
  ) {
    return _sv_play(
      slot,
    );
  }

  late final _sv_playPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('sv_play');
  late final _sv_play = _sv_playPtr.asFunction<int Function(int)>();

  int sv_play_from_beginning(
    int slot,
  ) {
    return _sv_play_from_beginning(
      slot,
    );
  }

  late final _sv_play_from_beginningPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_play_from_beginning');
  late final _sv_play_from_beginning =
      _sv_play_from_beginningPtr.asFunction<int Function(int)>();

  int sv_stop(
    int slot,
  ) {
    return _sv_stop(
      slot,
    );
  }

  late final _sv_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('sv_stop');
  late final _sv_stop = _sv_stopPtr.asFunction<int Function(int)>();

  int sv_pause(
    int slot,
  ) {
    return _sv_pause(
      slot,
    );
  }

  late final _sv_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('sv_pause');
  late final _sv_pause = _sv_pausePtr.asFunction<int Function(int)>();

  int sv_resume(
    int slot,
  ) {
    return _sv_resume(
      slot,
    );
  }

  late final _sv_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('sv_resume');
  late final _sv_resume = _sv_resumePtr.asFunction<int Function(int)>();

  int sv_sync_resume(
    int slot,
  ) {
    return _sv_sync_resume(
      slot,
    );
  }

  late final _sv_sync_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_sync_resume');
  late final _sv_sync_resume =
      _sv_sync_resumePtr.asFunction<int Function(int)>();

  int sv_set_autostop(
    int slot,
    int autostop,
  ) {
    return _sv_set_autostop(
      slot,
      autostop,
    );
  }

  late final _sv_set_autostopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_set_autostop');
  late final _sv_set_autostop =
      _sv_set_autostopPtr.asFunction<int Function(int, int)>();

  int sv_get_autostop(
    int slot,
  ) {
    return _sv_get_autostop(
      slot,
    );
  }

  late final _sv_get_autostopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_autostop');
  late final _sv_get_autostop =
      _sv_get_autostopPtr.asFunction<int Function(int)>();

  int sv_end_of_song(
    int slot,
  ) {
    return _sv_end_of_song(
      slot,
    );
  }

  late final _sv_end_of_songPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_end_of_song');
  late final _sv_end_of_song =
      _sv_end_of_songPtr.asFunction<int Function(int)>();

  int sv_rewind(
    int slot,
    int line_num,
  ) {
    return _sv_rewind(
      slot,
      line_num,
    );
  }

  late final _sv_rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_rewind');
  late final _sv_rewind = _sv_rewindPtr.asFunction<int Function(int, int)>();

  int sv_volume(
    int slot,
    int vol,
  ) {
    return _sv_volume(
      slot,
      vol,
    );
  }

  late final _sv_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_volume');
  late final _sv_volume = _sv_volumePtr.asFunction<int Function(int, int)>();

  int sv_set_event_t(
    int slot,
    int set1,
    int t,
  ) {
    return _sv_set_event_t(
      slot,
      set1,
      t,
    );
  }

  late final _sv_set_event_tPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_set_event_t');
  late final _sv_set_event_t =
      _sv_set_event_tPtr.asFunction<int Function(int, int, int)>();

  int sv_send_event(
    int slot,
    int track_num,
    int note,
    int vel,
    int module,
    int ctl,
    int ctl_val,
  ) {
    return _sv_send_event(
      slot,
      track_num,
      note,
      vel,
      module,
      ctl,
      ctl_val,
    );
  }

  late final _sv_send_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_send_event');
  late final _sv_send_event = _sv_send_eventPtr
      .asFunction<int Function(int, int, int, int, int, int, int)>();

  int sv_get_current_line(
    int slot,
  ) {
    return _sv_get_current_line(
      slot,
    );
  }

  late final _sv_get_current_linePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_current_line');
  late final _sv_get_current_line =
      _sv_get_current_linePtr.asFunction<int Function(int)>();

  int sv_get_current_line2(
    int slot,
  ) {
    return _sv_get_current_line2(
      slot,
    );
  }

  late final _sv_get_current_line2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_current_line2');
  late final _sv_get_current_line2 =
      _sv_get_current_line2Ptr.asFunction<int Function(int)>();

  int sv_get_current_signal_level(
    int slot,
    int channel,
  ) {
    return _sv_get_current_signal_level(
      slot,
      channel,
    );
  }

  late final _sv_get_current_signal_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_current_signal_level');
  late final _sv_get_current_signal_level =
      _sv_get_current_signal_levelPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int8> sv_get_song_name(
    int slot,
  ) {
    return _sv_get_song_name(
      slot,
    );
  }

  late final _sv_get_song_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'sv_get_song_name');
  late final _sv_get_song_name =
      _sv_get_song_namePtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int sv_get_song_bpm(
    int slot,
  ) {
    return _sv_get_song_bpm(
      slot,
    );
  }

  late final _sv_get_song_bpmPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_song_bpm');
  late final _sv_get_song_bpm =
      _sv_get_song_bpmPtr.asFunction<int Function(int)>();

  int sv_get_song_tpl(
    int slot,
  ) {
    return _sv_get_song_tpl(
      slot,
    );
  }

  late final _sv_get_song_tplPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_song_tpl');
  late final _sv_get_song_tpl =
      _sv_get_song_tplPtr.asFunction<int Function(int)>();

  int sv_get_song_length_frames(
    int slot,
  ) {
    return _sv_get_song_length_frames(
      slot,
    );
  }

  late final _sv_get_song_length_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'sv_get_song_length_frames');
  late final _sv_get_song_length_frames =
      _sv_get_song_length_framesPtr.asFunction<int Function(int)>();

  int sv_get_song_length_lines(
    int slot,
  ) {
    return _sv_get_song_length_lines(
      slot,
    );
  }

  late final _sv_get_song_length_linesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'sv_get_song_length_lines');
  late final _sv_get_song_length_lines =
      _sv_get_song_length_linesPtr.asFunction<int Function(int)>();

  int sv_get_time_map(
    int slot,
    int start_line,
    int len,
    ffi.Pointer<ffi.Uint32> dest,
    int flags,
  ) {
    return _sv_get_time_map(
      slot,
      start_line,
      len,
      dest,
      flags,
    );
  }

  late final _sv_get_time_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Uint32>, ffi.Int32)>>('sv_get_time_map');
  late final _sv_get_time_map = _sv_get_time_mapPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Uint32>, int)>();

  int sv_new_module(
    int slot,
    ffi.Pointer<ffi.Int8> type,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
    int z,
  ) {
    return _sv_new_module(
      slot,
      type,
      name,
      x,
      y,
      z,
    );
  }

  late final _sv_new_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('sv_new_module');
  late final _sv_new_module = _sv_new_modulePtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  int sv_remove_module(
    int slot,
    int mod_num,
  ) {
    return _sv_remove_module(
      slot,
      mod_num,
    );
  }

  late final _sv_remove_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_remove_module');
  late final _sv_remove_module =
      _sv_remove_modulePtr.asFunction<int Function(int, int)>();

  int sv_connect_module(
    int slot,
    int source,
    int destination,
  ) {
    return _sv_connect_module(
      slot,
      source,
      destination,
    );
  }

  late final _sv_connect_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_connect_module');
  late final _sv_connect_module =
      _sv_connect_modulePtr.asFunction<int Function(int, int, int)>();

  int sv_disconnect_module(
    int slot,
    int source,
    int destination,
  ) {
    return _sv_disconnect_module(
      slot,
      source,
      destination,
    );
  }

  late final _sv_disconnect_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_disconnect_module');
  late final _sv_disconnect_module =
      _sv_disconnect_modulePtr.asFunction<int Function(int, int, int)>();

  int sv_load_module(
    int slot,
    ffi.Pointer<ffi.Int8> file_name,
    int x,
    int y,
    int z,
  ) {
    return _sv_load_module(
      slot,
      file_name,
      x,
      y,
      z,
    );
  }

  late final _sv_load_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('sv_load_module');
  late final _sv_load_module = _sv_load_modulePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int, int, int)>();

  int sv_load_module_from_memory(
    int slot,
    ffi.Pointer<ffi.Void> data,
    int data_size,
    int x,
    int y,
    int z,
  ) {
    return _sv_load_module_from_memory(
      slot,
      data,
      data_size,
      x,
      y,
      z,
    );
  }

  late final _sv_load_module_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_load_module_from_memory');
  late final _sv_load_module_from_memory =
      _sv_load_module_from_memoryPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int sv_sampler_load(
    int slot,
    int sampler_module,
    ffi.Pointer<ffi.Int8> file_name,
    int sample_slot,
  ) {
    return _sv_sampler_load(
      slot,
      sampler_module,
      file_name,
      sample_slot,
    );
  }

  late final _sv_sampler_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('sv_sampler_load');
  late final _sv_sampler_load = _sv_sampler_loadPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int8>, int)>();

  int sv_sampler_load_from_memory(
    int slot,
    int sampler_module,
    ffi.Pointer<ffi.Void> data,
    int data_size,
    int sample_slot,
  ) {
    return _sv_sampler_load_from_memory(
      slot,
      sampler_module,
      data,
      data_size,
      sample_slot,
    );
  }

  late final _sv_sampler_load_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Uint32, ffi.Int32)>>('sv_sampler_load_from_memory');
  late final _sv_sampler_load_from_memory = _sv_sampler_load_from_memoryPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int, int)>();

  int sv_get_number_of_modules(
    int slot,
  ) {
    return _sv_get_number_of_modules(
      slot,
    );
  }

  late final _sv_get_number_of_modulesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_number_of_modules');
  late final _sv_get_number_of_modules =
      _sv_get_number_of_modulesPtr.asFunction<int Function(int)>();

  int sv_find_module(
    int slot,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _sv_find_module(
      slot,
      name,
    );
  }

  late final _sv_find_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('sv_find_module');
  late final _sv_find_module =
      _sv_find_modulePtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int sv_get_module_flags(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_flags(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_module_flags');
  late final _sv_get_module_flags =
      _sv_get_module_flagsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int32> sv_get_module_inputs(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_inputs(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_inputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Int32, ffi.Int32)>>('sv_get_module_inputs');
  late final _sv_get_module_inputs = _sv_get_module_inputsPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int, int)>();

  ffi.Pointer<ffi.Int32> sv_get_module_outputs(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_outputs(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Int32, ffi.Int32)>>('sv_get_module_outputs');
  late final _sv_get_module_outputs = _sv_get_module_outputsPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int, int)>();

  ffi.Pointer<ffi.Int8> sv_get_module_name(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_name(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int32, ffi.Int32)>>('sv_get_module_name');
  late final _sv_get_module_name = _sv_get_module_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int, int)>();

  int sv_get_module_xy(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_xy(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_xyPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_module_xy');
  late final _sv_get_module_xy =
      _sv_get_module_xyPtr.asFunction<int Function(int, int)>();

  int sv_get_module_color(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_color(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_module_color');
  late final _sv_get_module_color =
      _sv_get_module_colorPtr.asFunction<int Function(int, int)>();

  int sv_get_module_finetune(
    int slot,
    int mod_num,
  ) {
    return _sv_get_module_finetune(
      slot,
      mod_num,
    );
  }

  late final _sv_get_module_finetunePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_module_finetune');
  late final _sv_get_module_finetune =
      _sv_get_module_finetunePtr.asFunction<int Function(int, int)>();

  int sv_get_module_scope2(
    int slot,
    int mod_num,
    int channel,
    ffi.Pointer<ffi.Int16> dest_buf,
    int samples_to_read,
  ) {
    return _sv_get_module_scope2(
      slot,
      mod_num,
      channel,
      dest_buf,
      samples_to_read,
    );
  }

  late final _sv_get_module_scope2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int16>, ffi.Uint32)>>('sv_get_module_scope2');
  late final _sv_get_module_scope2 = _sv_get_module_scope2Ptr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int16>, int)>();

  int sv_module_curve(
    int slot,
    int mod_num,
    int curve_num,
    ffi.Pointer<ffi.Float> data,
    int len,
    int w,
  ) {
    return _sv_module_curve(
      slot,
      mod_num,
      curve_num,
      data,
      len,
      w,
    );
  }

  late final _sv_module_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Int32)>>('sv_module_curve');
  late final _sv_module_curve = _sv_module_curvePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Float>, int, int)>();

  int sv_get_number_of_module_ctls(
    int slot,
    int mod_num,
  ) {
    return _sv_get_number_of_module_ctls(
      slot,
      mod_num,
    );
  }

  late final _sv_get_number_of_module_ctlsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_number_of_module_ctls');
  late final _sv_get_number_of_module_ctls =
      _sv_get_number_of_module_ctlsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int8> sv_get_module_ctl_name(
    int slot,
    int mod_num,
    int ctl_num,
  ) {
    return _sv_get_module_ctl_name(
      slot,
      mod_num,
      ctl_num,
    );
  }

  late final _sv_get_module_ctl_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_get_module_ctl_name');
  late final _sv_get_module_ctl_name = _sv_get_module_ctl_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int, int, int)>();

  int sv_get_module_ctl_value(
    int slot,
    int mod_num,
    int ctl_num,
    int scaled,
  ) {
    return _sv_get_module_ctl_value(
      slot,
      mod_num,
      ctl_num,
      scaled,
    );
  }

  late final _sv_get_module_ctl_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('sv_get_module_ctl_value');
  late final _sv_get_module_ctl_value = _sv_get_module_ctl_valuePtr
      .asFunction<int Function(int, int, int, int)>();

  int sv_get_number_of_patterns(
    int slot,
  ) {
    return _sv_get_number_of_patterns(
      slot,
    );
  }

  late final _sv_get_number_of_patternsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'sv_get_number_of_patterns');
  late final _sv_get_number_of_patterns =
      _sv_get_number_of_patternsPtr.asFunction<int Function(int)>();

  int sv_find_pattern(
    int slot,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _sv_find_pattern(
      slot,
      name,
    );
  }

  late final _sv_find_patternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('sv_find_pattern');
  late final _sv_find_pattern = _sv_find_patternPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int sv_get_pattern_x(
    int slot,
    int pat_num,
  ) {
    return _sv_get_pattern_x(
      slot,
      pat_num,
    );
  }

  late final _sv_get_pattern_xPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_pattern_x');
  late final _sv_get_pattern_x =
      _sv_get_pattern_xPtr.asFunction<int Function(int, int)>();

  int sv_get_pattern_y(
    int slot,
    int pat_num,
  ) {
    return _sv_get_pattern_y(
      slot,
      pat_num,
    );
  }

  late final _sv_get_pattern_yPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_pattern_y');
  late final _sv_get_pattern_y =
      _sv_get_pattern_yPtr.asFunction<int Function(int, int)>();

  int sv_get_pattern_tracks(
    int slot,
    int pat_num,
  ) {
    return _sv_get_pattern_tracks(
      slot,
      pat_num,
    );
  }

  late final _sv_get_pattern_tracksPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_pattern_tracks');
  late final _sv_get_pattern_tracks =
      _sv_get_pattern_tracksPtr.asFunction<int Function(int, int)>();

  int sv_get_pattern_lines(
    int slot,
    int pat_num,
  ) {
    return _sv_get_pattern_lines(
      slot,
      pat_num,
    );
  }

  late final _sv_get_pattern_linesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'sv_get_pattern_lines');
  late final _sv_get_pattern_lines =
      _sv_get_pattern_linesPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int8> sv_get_pattern_name(
    int slot,
    int pat_num,
  ) {
    return _sv_get_pattern_name(
      slot,
      pat_num,
    );
  }

  late final _sv_get_pattern_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int32, ffi.Int32)>>('sv_get_pattern_name');
  late final _sv_get_pattern_name = _sv_get_pattern_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int, int)>();

  ffi.Pointer<sunvox_note> sv_get_pattern_data(
    int slot,
    int pat_num,
  ) {
    return _sv_get_pattern_data(
      slot,
      pat_num,
    );
  }

  late final _sv_get_pattern_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sunvox_note> Function(
              ffi.Int32, ffi.Int32)>>('sv_get_pattern_data');
  late final _sv_get_pattern_data = _sv_get_pattern_dataPtr
      .asFunction<ffi.Pointer<sunvox_note> Function(int, int)>();

  int sv_set_pattern_event(
    int slot,
    int pat_num,
    int track,
    int line,
    int nn,
    int vv,
    int mm,
    int ccee,
    int xxyy,
  ) {
    return _sv_set_pattern_event(
      slot,
      pat_num,
      track,
      line,
      nn,
      vv,
      mm,
      ccee,
      xxyy,
    );
  }

  late final _sv_set_pattern_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('sv_set_pattern_event');
  late final _sv_set_pattern_event = _sv_set_pattern_eventPtr
      .asFunction<int Function(int, int, int, int, int, int, int, int, int)>();

  int sv_get_pattern_event(
    int slot,
    int pat_num,
    int track,
    int line,
    int column,
  ) {
    return _sv_get_pattern_event(
      slot,
      pat_num,
      track,
      line,
      column,
    );
  }

  late final _sv_get_pattern_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('sv_get_pattern_event');
  late final _sv_get_pattern_event = _sv_get_pattern_eventPtr
      .asFunction<int Function(int, int, int, int, int)>();

  int sv_pattern_mute(
    int slot,
    int pat_num,
    int mute,
  ) {
    return _sv_pattern_mute(
      slot,
      pat_num,
      mute,
    );
  }

  late final _sv_pattern_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('sv_pattern_mute');
  late final _sv_pattern_mute =
      _sv_pattern_mutePtr.asFunction<int Function(int, int, int)>();

  int sv_get_ticks() {
    return _sv_get_ticks();
  }

  late final _sv_get_ticksPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('sv_get_ticks');
  late final _sv_get_ticks = _sv_get_ticksPtr.asFunction<int Function()>();

  int sv_get_ticks_per_second() {
    return _sv_get_ticks_per_second();
  }

  late final _sv_get_ticks_per_secondPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'sv_get_ticks_per_second');
  late final _sv_get_ticks_per_second =
      _sv_get_ticks_per_secondPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> sv_get_log(
    int size,
  ) {
    return _sv_get_log(
      size,
    );
  }

  late final _sv_get_logPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'sv_get_log');
  late final _sv_get_log =
      _sv_get_logPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();
}

class _fsid_t_ extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> _val_;
}

class _mbstate_t_ extends ffi.Struct {
  @ffi.Int32()
  external int _count_;

  external UnnamedUnion1 _value_;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int _wch_;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> _wchb_;
}

class G_fpos_t_ extends ffi.Struct {
  @__off_t()
  external int _pos_;

  external _mbstate_t_ _state_;
}

typedef __off_t = ffi.Int64;

class G_fpos64_t_ extends ffi.Struct {
  @__off64_t()
  external int _pos_;

  external _mbstate_t_ _state_;
}

typedef __off64_t = ffi.Int64;

class IO_FILE_ extends ffi.Struct {
  @ffi.Int32()
  external int flags_;

  external ffi.Pointer<ffi.Int8> IO_read_ptr_;

  external ffi.Pointer<ffi.Int8> IO_read_end_;

  external ffi.Pointer<ffi.Int8> IO_read_base_;

  external ffi.Pointer<ffi.Int8> IO_write_base_;

  external ffi.Pointer<ffi.Int8> IO_write_ptr_;

  external ffi.Pointer<ffi.Int8> IO_write_end_;

  external ffi.Pointer<ffi.Int8> IO_buf_base_;

  external ffi.Pointer<ffi.Int8> IO_buf_end_;

  external ffi.Pointer<ffi.Int8> IO_save_base_;

  external ffi.Pointer<ffi.Int8> IO_backup_base_;

  external ffi.Pointer<ffi.Int8> IO_save_end_;

  external ffi.Pointer<IO_marker_> markers_;

  external ffi.Pointer<IO_FILE_> chain_;

  @ffi.Int32()
  external int fileno_;

  @ffi.Int32()
  external int flags2_;

  @__off_t()
  external int old_offset_;

  @ffi.Uint16()
  external int cur_column_;

  @ffi.Int8()
  external int vtable_offset_;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> shortbuf_;

  external ffi.Pointer<_IO_lock_t> lock_;

  @__off64_t()
  external int offset_;

  external ffi.Pointer<IO_codecvt_> codecvt_;

  external ffi.Pointer<IO_wide_data_> wide_data_;

  external ffi.Pointer<IO_FILE_> freeres_list_;

  external ffi.Pointer<ffi.Void> freeres_buf_;

  @size_t()
  external int _pad5_;

  @ffi.Int32()
  external int mode_;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> unused2_;
}

class IO_marker_ extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class IO_codecvt_ extends ffi.Opaque {}

class IO_wide_data_ extends ffi.Opaque {}

typedef size_t = ffi.Uint64;
typedef FILE = IO_FILE_;

class _va_list_tag_ extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef __ssize_t = ffi.Int64;
typedef fpos_t = __fpos_t;
typedef __fpos_t = G_fpos_t_;

class sunvox_note extends ffi.Struct {
  @ffi.Uint8()
  external int note;

  @ffi.Uint8()
  external int vel;

  @ffi.Uint16()
  external int module;

  @ffi.Uint16()
  external int ctl;

  @ffi.Uint16()
  external int ctl_val;
}

const int _STDIO_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 34;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int NULL = 0;

const int __GNUC_VA_LIST = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDINT_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NOTECMD_NOTE_OFF = 128;

const int NOTECMD_ALL_NOTES_OFF = 129;

const int NOTECMD_CLEAN_SYNTHS = 130;

const int NOTECMD_STOP = 131;

const int NOTECMD_PLAY = 132;

const int NOTECMD_SET_PITCH = 133;

const int SV_INIT_FLAG_NO_DEBUG_OUTPUT = 1;

const int SV_INIT_FLAG_USER_AUDIO_CALLBACK = 2;

const int SV_INIT_FLAG_OFFLINE = 2;

const int SV_INIT_FLAG_AUDIO_INT16 = 4;

const int SV_INIT_FLAG_AUDIO_FLOAT32 = 8;

const int SV_INIT_FLAG_ONE_THREAD = 16;

const int SV_TIME_MAP_SPEED = 0;

const int SV_TIME_MAP_FRAMECNT = 1;

const int SV_MODULE_FLAG_EXISTS = 1;

const int SV_MODULE_FLAG_EFFECT = 2;

const int SV_MODULE_FLAG_MUTE = 4;

const int SV_MODULE_FLAG_SOLO = 8;

const int SV_MODULE_FLAG_BYPASS = 16;

const int SV_MODULE_INPUTS_OFF = 16;

const int SV_MODULE_INPUTS_MASK = 16711680;

const int SV_MODULE_OUTPUTS_OFF = 24;

const int SV_MODULE_OUTPUTS_MASK = -16777216;

const String LIBNAME = './sunvox.so';
